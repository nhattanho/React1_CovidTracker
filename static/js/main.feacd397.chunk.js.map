{"version":3,"sources":["components/cards/card.component.jsx","api/get-data.jsx","components/charts/chart.component.jsx","components/country/country.component.jsx","App.js","index.js","images/Covid_Banner_1024x259.jpg"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","varaint","start","end","value","duration","separator","Date","toDateString","variant","url","GetData","country","signal","a","specificUrl","axios","get","realData","name","alert","fetchDataDaily","resDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","nameCountries","Chart","useState","setDailyData","useEffect","abortController","AbortController","getDailyData","console","log","abort","fetchAPI","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","setFetchCountries","getDataCountries","fetchNameCountries","FormControl","NativeSelect","onChange","id","key","App","state","e","target","dataCountry","setState","this","src","showImage","alt","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.feacd397.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ( {data: {confirmed, recovered, deaths, lastUpdate} } ) => {\r\n    /*We can't use data instead of confirmed variable to check at here because the data has been destructured to its methods*/\r\n    /* At the first time page loading, the data value hasn't been received from the async axios function, so the Card component\r\n    can't not get the value for its child components that makes it fails ==> checking for the first time is really necessary*/\r\n    if(!confirmed) return 'Loading in showing Cards...';\r\n    return (\r\n        <div className='container'>\r\n            <Grid container spacing={3} justify='center' className='group-card'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card', 'infected')}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography varaint='h5' gutterBottom>\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card', 'recovered')}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography varaint='h5' gutterBottom>\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card', 'deaths')}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography varaint='h5' gutterBottom>\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url = 'https://cors-anywhere.herokuapp.com/https://covid19.mathdro.id/api';\r\n\r\nexport const GetData = async (country, signal) => {\r\n    let specificUrl = url;\r\n    if (country) {\r\n        specificUrl = `${specificUrl}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        /* Using destructuring in JS ES6 */\r\n        const {data} = await axios.get(specificUrl, {signal: signal });\r\n        /* Using realData as an object to get all neccessary data from API */\r\n        const realData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate\r\n        }\r\n        return realData;\r\n        /* Note: because data is also an object itself, so we can continue using the destructuring\r\n        for it too, just like:\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(url);\r\n        return { confirmed, recovered, deaths, lastUpdate }; */\r\n    } catch(err) {\r\n        if (err.name === 'AbortError') return\r\n        alert('Sorry, I am using the free API, so it limits the time to request the server\\n Please try again later!');\r\n        //console.log(err);\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const fetchDataDaily = async (signal) => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`,{signal:signal});\r\n        //console.log(data);\r\n        const resDailyData = data.map(dailyData => {\r\n            return {\r\n                confirmed: dailyData.confirmed.total,\r\n                deaths: dailyData.deaths.total,\r\n                date: dailyData.reportDate\r\n            };\r\n        })\r\n        //console.log(resDailyData);\r\n        return resDailyData;\r\n    }catch(err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const fetchCountries = async (signal) => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`, {signal: signal});\r\n        const nameCountries = countries.map( ({name})=> name);\r\n        return nameCountries;\r\n    } catch(err) {\r\n        return err;\r\n    }\r\n};","import React, {useState, useEffect} from 'react';\r\nimport './chart.style.css';\r\nimport {fetchDataDaily} from '../../api/get-data';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);//Hook\r\n    useEffect( ()=>{\r\n        const abortController = new AbortController();\r\n        const signal = abortController.signal;\r\n        const fetchAPI = async ()=>{\r\n            try {\r\n                const getDailyData = await fetchDataDaily(signal);\r\n                setDailyData(getDailyData);\r\n                // return function cleanup() {\r\n                //     abortController.abort();\r\n                // }\r\n                //console.log(dailyData);\r\n            }catch(err) {\r\n                console.log(err);\r\n                return function cleanup() {\r\n                    abortController.abort();\r\n                }\r\n            }\r\n        }\r\n        fetchAPI();\r\n    }, []); // though the second parameter is empty but it stil prevents the hook run all the times\r\n    //==> so it only runs whenever something change in its body\r\n\r\n    const LineChart = (\r\n        dailyData.length //checking for the first time of rendering\r\n        ?\r\n        (  <Line className='line'\r\n                data={{\r\n                    labels: dailyData.map( ({date})=> date),\r\n                    datasets: [{\r\n                        data: dailyData.map( ({confirmed})=> confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    }, \r\n                    {\r\n                        data: dailyData.map( ({deaths})=> deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />\r\n        ) \r\n        : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?\r\n        (\r\n            <Bar className='bar'\r\n                data={{\r\n                   labels: ['Infected', 'Recovered', 'Deaths'],\r\n                   datasets: [{\r\n                       label: 'People',\r\n                       backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                       data: [confirmed.value, recovered.value, deaths.value]\r\n                   }]\r\n                }}\r\n                options={{\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: `Current status in ${country}`\r\n                    }\r\n                }}\r\n            />\r\n        )\r\n        : null\r\n    );\r\n\r\n    return (\r\n        <div className='container'>\r\n            {country ? barChart : LineChart }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport './country.style.css';\r\nimport {fetchCountries} from '../../api/get-data';\r\n\r\nconst Country = ({handleCountryChange}) => {\r\n    const [nameCountries, setFetchCountries] = useState([]);//Hook\r\n    useEffect( ()=>{\r\n        const abortController = new AbortController();\r\n        const signal = abortController.signal;\r\n        const fetchNameCountries = async () => {\r\n            try {\r\n                const getDataCountries = await fetchCountries(signal);\r\n                setFetchCountries(getDataCountries);\r\n                //console.log(nameCountries);\r\n            }catch(err) {\r\n                console.log(err);\r\n                return function cleanup() {\r\n                    abortController.abort();\r\n                }\r\n                \r\n            }\r\n        }\r\n        fetchNameCountries();\r\n    },[setFetchCountries]);// if the second argument exists, the hook only runs when having\r\n    //something change on this argument except the first time everything have to be ran\r\n\r\n    return (\r\n        nameCountries.length \r\n        ?\r\n        (\r\n        <FormControl className='form-control'>\r\n            <NativeSelect onChange={handleCountryChange}>\r\n                <option value='Global'>Global</option>\r\n                {\r\n                    nameCountries.map( (country, id ) => {\r\n                        return (\r\n                            <option key={id} value={country}>{country}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n        )\r\n        :\r\n        null\r\n    )\r\n}\r\n\r\nexport default Country;","import React, { Component } from 'react';\nimport './App.css';\nimport { Cards, Chart, Country} from './components';\nimport {GetData} from './api/get-data';\nimport showImage from '../src/images/Covid_Banner_1024x259.jpg';\nclass App extends Component {\n  /* Create an state to update data for rendering process */\n  state = {\n    data: {},\n    country: ''\n  };\n\n  abortController = new AbortController();\n  signal = this.abortController.signal;\n\n  handleCountryChange = async (e) => {\n    //console.log(e.target.value);\n    let country = e.target.value;\n    if (country === 'global') country = '';\n    const dataCountry = await GetData(country, this.signal);\n    this.setState({data: dataCountry, country: country});\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  async componentDidMount() {\n    /* If you don't want componentDidMount become to async function, you can do this way.\n    GetData().then( result =>{\n      //data now is an object got from GetData function \n      const data = result;\n\n      //just for testing if we get true data\n      console.log(data);\n\n      //Update state when getting true data\n      this.setState({data: data})\n    })\n    .catch(err=>{\n      console.log(err);\n    }); */\n   \n   const data = await GetData('',this.signal);\n   this.setState({data: data});\n  };\n\n  render() {\n    const {data, country} = this.state;\n    while (!data) return 'Loading in App...';\n    return (\n      <div className='container'>\n        <img className='image' src={showImage} alt='COVID-19'/>\n        <Cards data={data}></Cards>\n        <Country handleCountryChange={this.handleCountryChange}></Country>\n        <Chart data={data} country={country}></Chart>\n        \n      </div>\n    );\n  }\n}\n  \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);","module.exports = __webpack_public_path__ + \"static/media/Covid_Banner_1024x259.8cfd2951.jpg\";"],"sourceRoot":""}